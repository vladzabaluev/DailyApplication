@using System.Security.Claims
@inject DailyApplication.Controllers.GroupsController _groupsController
@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingAuthenticationState>
    <CascadingValue Value="@groups">
        <Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
            <Found Context="routeData">
                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            </Found>
            <NotFound>
                <LayoutView Layout="@typeof(MainLayout)">
                    <h1>Error404</h1>
                    <p>Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingValue>
</CascadingAuthenticationState>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private List<Group> groups = new();

    protected async override Task OnInitializedAsync()
    {
        AuthenticationState currentAuth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal currentUser = currentAuth.User;

        groups = _groupsController.GetUserGroups(currentUser);
        groups.Add(new Group() { Id = 1, Name = "Heh", Description = "adaw" });
        groups.Add(new Group() { Id = 2, Name = "KCa", Description = "MEME" });

        @foreach(var item in groups)
        {
            Console.WriteLine(item.Name);
        }
    }
}