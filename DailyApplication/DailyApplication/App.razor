@using System.Security.Claims
@inject DailyApplication.Controllers.GroupsController _groupsController
@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingAuthenticationState>
    <CascadingValue Value="@groups" Name="groups">
        <CascadingValue Value="@invites" Name="invites">
            <Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
                <Found Context="routeData">
                    <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                </Found>
                <NotFound>
                    <LayoutView Layout="@typeof(MainLayout)">
                        <h1>Error404</h1>
                        <p>Sorry, there's nothing at this address.</p>
                    </LayoutView>
                </NotFound>
            </Router>
        </CascadingValue>
    </CascadingValue>
</CascadingAuthenticationState>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private List<Group> groups = new();
    private List<Group> invites = new();

    protected async override Task OnInitializedAsync()
    {
        AuthenticationState currentAuth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal currentUser = currentAuth.User;

        groups = _groupsController.GetUserGroups(currentUser);

        invites = await _groupsController.GetAllInvites(currentUser);
        foreach (var gr in groups)
        {
            Console.WriteLine(gr.Id);
        }
    }

}