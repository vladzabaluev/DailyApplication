@using System.Security.Claims
@using System.Timers
@inject DailyApplication.Controllers.GroupsController _groupsController
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navMan

<CascadingAuthenticationState>
    <CascadingValue Value="@groups" Name="groups">
        <CascadingValue Value="@invites" Name="invites">
            <Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
                <Found Context="routeData">
                    <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                         <NotAuthorized>
                             <DailyApplication.Pages.Index />
                         </NotAuthorized>
                     </AuthorizeRouteView>
                </Found>
                <NotFound>
                    <LayoutView Layout="@typeof(MainLayout)">
                             <DailyApplication.Pages.Index />
                    </LayoutView>
                </NotFound>
            </Router>
        </CascadingValue>
    </CascadingValue>
</CascadingAuthenticationState>

@code
{
    private List<Group> groups = new();
    private List<Group> invites = new();

    //Timer timer = new Timer();

    protected async override Task OnInitializedAsync()
    {
        AuthenticationState currentAuth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal currentUser = currentAuth.User;
        
            groups = _groupsController.GetUserGroups(currentUser);
            invites = await _groupsController.GetAllInvites(currentUser);
            
            //if (currentUser == null) { navMan.NavigateTo("hello"); }

        //timer.Interval = 5000;
        //timer.Elapsed +=async(_, _) =>
        //{
        //    groups = _groupsController.GetUserGroups(currentUser);
        //    invites = await _groupsController.GetAllInvites(currentUser);
        //StateHasChanged();
        //}
    }

}