@page "/groups"
@using System.Security.Claims
@inject DailyApplication.Controllers.GroupsController _groupsController;

<form>
    <div class="form-group">
        <label class="control-label">Название</label>
        <input class="form-control" placeholder="Название" @bind=groupName />
        <span class="text-danger"></span>
    </div>
    <div class="form-group">
        <label class="control-label">Описание</label>
        <input type="text" class="form-control" placeholder="Описание" @bind=groupDescription />
        <span class="text-danger"></span>
    </div>
    <input type="submit" class="btn btn-outline-dark mt-1 mb-3" value="Создать группу" @onclick=Create @onclick:preventDefault></input>
</form>

<h1 class="display-4 my-2">Доступные группы:</h1>

<div>
    @foreach (var group in groups)
    {
        <div class="alert alert-secondary" role="alert">
            <h4 class="alert-heading">@group.Id. @group.Name</h4>
            <hr />
            <p>@group.Description</p>
            <div class="d-flex justify-content-between">
                <div>
                    <button class="btn btn-info">Пригласить пользователя</button>
                    <button class="btn btn-danger">Выйти из группы</button>
                </div>
                <div>
                    <button class="btn btn-outline-primary">Изменить группу</button>
                    <button class="btn btn-outline-danger">Удалить группу</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string groupName = "";
    private string groupDescription;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private async Task<Group> Create()
    {
        if (groupName != "")
        {
            AuthenticationState currentAuth = await authenticationStateTask;
            ClaimsPrincipal currentUser = currentAuth.User;

            Group newGroup = new Group()
            {
                Name = groupName,
                Description = groupDescription,
            };

            newGroup = await _groupsController.Create(newGroup, currentUser);
            groups.Add(newGroup);
            groupName = string.Empty;
            groupDescription = string.Empty;
        }
        return null;
    }
    [CascadingParameter]
    protected List<Group> groups { get; set; }
}