@page "/groups"
@attribute [Authorize]
@using System.Security.Claims
@inject DailyApplication.Controllers.GroupsController _groupsController;
@inject DailyApplication.Controllers.EventsController _eventsController;

<form>
    <div class="form-group">
        <label class="control-label">Название</label>
        <input class="form-control" placeholder="Название" @bind=groupName />
        <span class="text-danger"></span>
    </div>
    <div class="form-group">
        <label class="control-label">Описание</label>
        <input type="text" class="form-control" placeholder="Описание" @bind=groupDescription />
        <span class="text-danger"></span>
    </div>
    <input type="submit" class="btn btn-outline-dark mt-1 mb-3" value="Создать группу" @onclick=Create @onclick:preventDefault></input>
</form>

<h1 class="display-4 my-2">Доступные группы:</h1>

@if(groups.Count == 0)
{
    <p>Нет доступных групп</p>
}
else
{
    <div>
        @for (int index = 0; index < groups.Count; index++)
        {
            <GroupBox Index=index Exit=ExitGroup Delete=DeleteGroup/>
        }
    </div>
}

@code {
    private string groupName = "";
    private string groupDescription;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [CascadingParameter(Name = "groups")]
    protected List<Group> groups { get; set; }

    private async Task<Group> Create()
    {
        if (groupName != "")
        {
            AuthenticationState currentAuth = await authenticationStateTask;
            ClaimsPrincipal currentUser = currentAuth.User;

            Group newGroup = new Group()
            {
                Name = groupName,
                Description = groupDescription,
            };

            newGroup = await _groupsController.Create(newGroup, currentUser);
            groups.Add(newGroup);
            groupName = string.Empty;
            groupDescription = string.Empty;
        }
        return null;
    }

    private async void DeleteGroup(Group group)
    {
        groups.Remove(group);
        await _groupsController.DeleteGroup(group.Id, _eventsController);

    }
    
    private async void ExitGroup(Group group)
    {
        AuthenticationState currentAuth = await authenticationStateTask;
        ClaimsPrincipal currentUser = currentAuth.User;
        groups.Remove(group);
        await _groupsController.Exit(currentUser, group, _eventsController);
    }
}