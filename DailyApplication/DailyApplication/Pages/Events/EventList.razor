@page "/events"

@using System.Globalization;
@using Microsoft.VisualBasic;
@using System.Security.Claims
@inject DailyApplication.Controllers.EventsController _eventController;
@inject DailyApplication.Controllers.GroupsController _groupController;

<h1>События</h1>
<Modal Collapse="@CollapseModalCreate" Toggle="@(() => ToggleModalCreate(DateTime.Now))">
    <CreateEvent Toggle="@(() => ToggleModalCreate(DateTime.Now))" Create="@CreateEvent" eventDeadline="@CreateDeadlineTime" />
</Modal>
<div class="d-flex justify-content-between">
    <button class="btn btn-outline-dark mt-1 mb-3" @onclick="@(() => ToggleModalCreate(DateTime.Now))">Создать</button>
    <div>
        <DateSelector Week="@week" IncrementWeek="@InWeek" DecrementWeek="@DeWeek" />
        <ViewSelect View=setView />
    </div>
</div>

@if (view == "W")
{
    <div class="row mx-0">
        @for (int weekDay = 0; weekDay < 7; weekDay++)
        {
            <EventDayList events=@events week=@week weekDay=@weekDay OpenCreateBox=@ToggleModalCreate />
        }
    </div>
}
@if (view == "M")
{
    <h1>MONTH</h1>
}
@if (view == "D")
{
    <h1>DAY</h1>
}

@code
{
    private string view = "W";
    private void setView(string newView)
    {
        view = newView;
    }
    DateTime[] week = new DateTime[7];
    CultureInfo myCI = new CultureInfo("en-US");
    protected override void OnInitialized()
    {
        CalendarWeekRule myCWR = myCI.DateTimeFormat.CalendarWeekRule;
        DayOfWeek myFirstDOW = myCI.DateTimeFormat.FirstDayOfWeek;

        DateTime GetFirstDateOfWeek(DateTime dayInWeek, DayOfWeek firstDay)
        {
            DateTime firstDayInWeek = dayInWeek.Date;
            while (firstDayInWeek.DayOfWeek != firstDay)
                firstDayInWeek = firstDayInWeek.AddDays(-1);

            return firstDayInWeek;
        }

        var DateInit = new DateTime(DateTime.Now.Year, 1, 1, 0, 0, 0);
        DateInit = GetFirstDateOfWeek(DateInit, DayOfWeek.Monday);
        DateInit = myCI.Calendar.AddWeeks(DateInit, myCI.Calendar.GetWeekOfYear(DateTime.Now.AddDays(-1), myCWR, myFirstDOW) - 1);
        week = weekInit(DateInit);
    }

    private DateTime[] weekInit(DateTime DateInit)
    {
        DateTime[] week = new DateTime[7];
        week[0] = DateInit;
        for (int i = 1; i < 7; i++)
        {
            week[i] = week[i - 1].AddDays(1);
        }
        return week;
    }

    // Селектор недель
    #region

    void InWeek()
    {
        week = weekInit(myCI.Calendar.AddWeeks(week[0], +1));
    }

    void DeWeek()
    {
        week = weekInit(myCI.Calendar.AddWeeks(week[0], -1));
    }
    #endregion

    #region Создание события
    private bool CollapseModalCreate = false;
    private DateTime CreateDeadlineTime;

    private void ToggleModalCreate(DateTime DeadlineTime)
    {
        CreateDeadlineTime = DeadlineTime;
        CollapseModalCreate = !CollapseModalCreate;
    }

    private void CreateEvent(Event newEvent)
    {
        events.Add(newEvent);
    }
    #endregion

    #region Получение событий
    private List<Event> events;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        AuthenticationState currentAuth = await authenticationStateTask;
        ClaimsPrincipal currentUser = currentAuth.User;

        //events = _eventController.GetGroupEvents(currentUser);
        //events = _eventController.GetUserEvents(currentUser);
        events = _eventController.GetAllUserEvent(currentUser, _groupController);
    }
    #endregion
}