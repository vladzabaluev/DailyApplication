@page "/events"

@using System.Globalization;
@using Microsoft.VisualBasic;
@using System.Security.Claims
@inject DailyApplication.Controllers.EventsController _eventController;

<h1>События</h1>
<Modal Collapse="@CollapseModalCreate" Toggle="@ToggleModalCreate">
    <CreateEvent Toggle="@ToggleModalCreate" Create="@CreateEvent"/>
</Modal>
<Modal Collapse="@CollapseModalOpen" Toggle="@ToggleModalOpen">
</Modal>
<button class="btn btn-outline-dark mt-1 mb-3" @onclick=ToggleModalCreate>Создать</button>
@{
    string[] weekDays = { "Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб" };
    DateTime now = DateTime.Now;
    DateTime UTC = DateTime.UtcNow;
    DateTime today = DateTime.Today;
    CultureInfo myCI = new CultureInfo("en-US");
    Calendar myCal = myCI.Calendar;
    CalendarWeekRule myCWR = myCI.DateTimeFormat.CalendarWeekRule;
    DayOfWeek myFirstDOW = myCI.DateTimeFormat.FirstDayOfWeek;

    DateTime GetFirstDateOfWeek(DateTime dayInWeek, DayOfWeek firstDay)
    {
        DateTime firstDayInWeek = dayInWeek.Date;
        while (firstDayInWeek.DayOfWeek != firstDay)
            firstDayInWeek = firstDayInWeek.AddDays(-1);

        return firstDayInWeek;
    }

    var date1 = new DateTime(DateTime.Now.Year, 1, 1, 0, 0, 0);
    date1 = GetFirstDateOfWeek(date1, 0);
    date1 = myCal.AddWeeks(date1, myCal.GetWeekOfYear(DateTime.Now, myCWR, myFirstDOW) - 1);
    DateTime[] week = new DateTime[7];
    week[0] = date1;
    for (int i = 1; i < 7; i++)
    {
        week[i] = week[i - 1].AddDays(1);
    }
}
<div class="row mx-0">
    @for (var weekDay = 0; weekDay < 7; weekDay++)
    {
        <div class="col px-1">
            <div class="border-bottom border-secondary px-1">
                @if (today == week[weekDay])
                {
                    <h5 class="text-right">@now.ToString("m")</h5>
                    <h6 class="text-right">@weekDays[weekDay]</h6>
                }
                else
                {
                    <h5 class="text-right text-secondary">@week[weekDay].ToString("m")</h5>
                    <h6 class="text-right text-secondary">@weekDays[weekDay]</h6>
                }
            </div>
            <div class="px-2">
                @foreach (var item in events)
                {
                    @if (item.DeadlineTime.ToString("MM/dd/yyyy") == week[weekDay].ToString("MM/dd/yyyy"))
                    {
                        <div @onclick="ToggleModalOpen">
                            <EventBox item="@item" DeleteEvent="@DeleteEvent" />
                        </div>
                    }
                }
            </div>
        </div>
    }
</div>

@code
{
    #region Создание события
    private bool CollapseModalCreate = false;

    private void ToggleModalCreate()
    {
        CollapseModalCreate = !CollapseModalCreate;
    }
    
    private void CreateEvent (Event newEvent)
    {
        events.Add(newEvent);
    }
    #endregion

    #region Получение событий
    private List<Event> events;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        AuthenticationState currentAuth = await authenticationStateTask;
        ClaimsPrincipal currentUser = currentAuth.User;

        events = _eventController.GetUserEvents(currentUser);
    }
    #endregion
    
    #region Просмотр события
    private bool CollapseModalOpen = false;

    private void ToggleModalOpen()
    {
        CollapseModalOpen = !CollapseModalOpen;
    }
    #endregion
    
    #region Удаление события
    private async void DeleteEvent(Event deletedEvent)
    {
        bool isSucceded = events.Remove(deletedEvent);
        if(isSucceded)
            await _eventController.DeleteEvent(deletedEvent.Id);
    }
    #endregion
}