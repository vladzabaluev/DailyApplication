@inject DailyApplication.Controllers.EventsController _eventController;
@using System.Security.Claims

<form>
    <div class="modal-header">
        <h5 class="modal-title">Создать событие</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="@(() => Toggle.InvokeAsync(DateTime.Now))">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="modal-body">
            <div class="text-danger"></div>
            <div class="form-group">
                <label class="control-label"></label>
                <input class="form-control" placeholder="Название" @bind=eventName />
                <span class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label"></label>
                <input type="textarea" class="form-control" placeholder="Описание" @bind=eventDescription />
                <span class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label"></label>
                <input @bind:format="yyyy-MM-ddTHH:mm" type="datetime-local" class="form-control" placeholder="Время окончания" @bind=eventDeadline />
                <span class="text-danger"></span>
            </div>
             <div class="form-group">
                @foreach(var str in subEventList)
                {
                    <div class="alert alert-secondary" role="alert">@str</div>
                }
            </div>
            <div class="form-group">
                <label class="control-label"></label>
                <input class="form-control" placeholder="Название" @bind=CurrentSubEventName />
                <span class="text-danger"></span>
            </div>
            @*<div class="form-group">
                @currentSubEventName
            </div>*@
           
    </div>
    <div class="modal-footer">
        <div>
            <input type="submit" value="Создать" class="btn btn-primary" @onclick=AddEvent @onclick:preventDefault/>
        </div>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="@(() => Toggle.InvokeAsync(DateTime.Now))">Закрыть</button>
    </div>
</form>

@code {
    private string currentSubEventName = "";
    private string CurrentSubEventName
    {
        get => currentSubEventName;
        set
        {
            subEventList.Add(value);
            currentSubEventName = "";
        }
    }
    List<string> subEventList = new List<string>();

    [Parameter]
    public EventCallback<DateTime> Toggle { get; set; }

    [Parameter]
    public DateTime eventDeadline { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string eventName;
    private string eventDescription;

    [Parameter]
    public EventCallback<Event> Create { get; set; }

    //protected override void OnInitialized()
    //{
    //    if (eventDeadline == null)
    //    {

    //    }
    //}

    private async void AddEvent()
    {
        AuthenticationState currentAuth = await authenticationStateTask;
        ClaimsPrincipal currentUser = currentAuth.User;

        if (!string.IsNullOrWhiteSpace(eventName))
        {
            Event newEvent = _eventController.CreateEvent(eventName, eventDescription, currentUser, eventDeadline, subEventList);

            await Create.InvokeAsync(newEvent);
            await Toggle.InvokeAsync(DateTime.Now);
            eventName = string.Empty;
            eventDescription = string.Empty;
            eventDeadline = DateTime.Now;
            currentSubEventName = string.Empty;
            subEventList.Clear();
        }

    }
}