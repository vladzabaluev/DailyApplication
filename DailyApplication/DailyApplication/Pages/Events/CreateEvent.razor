@inject DailyApplication.Controllers.EventsController _eventController;
@using System.Security.Claims

<form>
    <div class="modal-header">
        <h5 class="modal-title">Создать событие</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="@(() => Toggle.InvokeAsync(DateTime.Now))">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="modal-body">
        <div class="text-danger"></div>
        <div class="form-group">
            <label class="control-label">Название</label>
            <input class="form-control" placeholder="Название" @bind=eventName />
            <span class="text-danger"></span>
        </div>
        <div class="form-group">
            <label class="control-label">Описание</label>
            <input type="text" class="form-control" placeholder="Описание" @bind=eventDescription />
            <span class="text-danger"></span>
        </div>
        <div class="form-group">
            <label class="control-label">Время окончания</label>
            <input @bind:format="yyyy-MM-ddTHH:mm" type="datetime-local" class="form-control" placeholder="Время окончания" @bind=eventDeadline />
            <span class="text-danger"></span>
        </div>
        <div class="form-group">
            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" @onclick="(()=>show = !show)">
                    @eventGroupName
                </button>
                <div class="dropdown-menu @showDropDown" aria-labelledby="dropdownMenuButton">
                    <div class="dropdown-item" @onclick="@(() => {
                                                               eventGroup = null;
                                                               eventGroupName = "Команда";
                                                               show = false;
                                                               currentGroup = null;
                                                           })">
                        Нет команды
                    </div>
                    @foreach (var group in groups)
                    {
                        <div class="dropdown-item" @onclick="(() => {
                                                                 eventGroup = group.Id;
                                                                 eventGroupName = group.Name;
                                                                 show = false;
                                                                 currentGroup = group;
                                                             })">
                            @group.Name
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="form-group">
            <label class="control-label">Подсобытия:</label>
            <div class="form-group">
                @for (int i = 0; i < subEventList.Count; i++)
                {
                    @*<input value="@subEventList[i]" @onchange="((ChangeEventArgs __e) => OneSub(__e.Value.ToString(), i))"  class="alert alert-secondary" role="alert" />*@
                    @*<div class="alert alert-secondary" role="alert">@subEventList[i]</div>*@
                    <Input SubEvents="@subEventList" Index="@i" CallBack="@((value) => subEventList = value)" />
                }
                <input class="form-control" placeholder="Подсобытие" @bind=GetSubEvent />
                @*<input class="form-control" value="@currentSubEventName" placeholder="Название" @onchange="((ChangeEventArgs __e)=> { currentSubEventName = __e.Value.ToString();
                        subEventList.Add(currentSubEventName);
                        currentSubEventName = string.Empty;
                        __e.Value= string.Empty;
                    })" />*@
                <span class="text-danger"></span>
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <div>
            <input type="submit" value="Создать" class="btn btn-primary" @onclick=AddEvent @onclick:preventDefault />
        </div>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="@(() => Toggle.InvokeAsync(DateTime.Now))">Закрыть</button>
    </div>
</form>

@code {
    [CascadingParameter]
    protected List<Group> groups { get; set; }
    private bool show = false;
    #nullable enable
    private string? showDropDown => show ? "show" : null;
    private string currentSubEventName = "";
    private int? eventGroup;
    private string eventGroupName = "Команда";
    private Group? currentGroup;
    private string GetSubEvent
    {
        get => currentSubEventName;
        set
        {
            subEventList.Add(new Sub_event() { 
                Description = value, 
                isDone = false
            });
            currentSubEventName = "";
        }
    }

    List<Sub_event> subEventList = new List<Sub_event>();

    [Parameter]
    public EventCallback<DateTime> Toggle { get; set; }

    [Parameter]
    public DateTime eventDeadline { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string? eventName;
    private string? eventDescription;

    [Parameter]
    public EventCallback<Event> Create { get; set; }

    private async void AddEvent()
    {
        AuthenticationState currentAuth = await authenticationStateTask;
        ClaimsPrincipal currentUser = currentAuth.User;

        if (!string.IsNullOrWhiteSpace(eventName))
        {
            Console.WriteLine(eventGroup);
            Event newEvent = _eventController.CreateEvent(eventName, eventDescription, currentUser, eventDeadline, subEventList, currentGroup);

            await Create.InvokeAsync(newEvent);
            await Toggle.InvokeAsync(DateTime.Now);

            eventName = string.Empty;
            eventDescription = string.Empty;
            eventDeadline = DateTime.Now;
            currentSubEventName = string.Empty;
            subEventList.Clear();
        }

    }
    protected override void OnParametersSet()
    {
        Console.WriteLine(eventGroup);
    }
}