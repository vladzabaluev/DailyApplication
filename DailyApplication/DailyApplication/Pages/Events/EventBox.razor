@inject DailyApplication.Controllers.EventsController EventService;

@if (ModalOpen)
{
    <Modal Toggle=ToggleModalOpen>
        <OpenEvent Toggle=ToggleModalOpen Item=Item Delete=DeleteEvent/>
    </Modal>
}
<div class="container border-top event overflow-hidden" @onmouseover=ToggleDelBtn @onmouseout=ToggleDelBtn>
    <div class="row">
        <div class="col-10 px-0" @onclick="ToggleModalOpen">
            <h5 class="py-2 m-0">
                @Item.Name
            </h5>
        </div>
        <div class="col-2 d-flex align-self-center px-0 justify-content-end">
            <button class="@DelBtnClass text-right btn btn-outline-dark px-2 py-0" @onclick="@(() => DeleteEvent.InvokeAsync(Item))">X</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Event Item { get; set; }

    private bool collapseDelBtn = true;

    #nullable enable
    private string? DelBtnClass => collapseDelBtn ? "collapse" : null;

    private void ToggleDelBtn()
    {
        collapseDelBtn = !collapseDelBtn;
    }

    [Parameter]
    public EventCallback<Event> DeleteEvent { get; set; }
    
    #region Просмотр события
    private bool ModalOpen = false;

    private void ToggleModalOpen()
    {
        ModalOpen = !ModalOpen;
    }
    #endregion
}
