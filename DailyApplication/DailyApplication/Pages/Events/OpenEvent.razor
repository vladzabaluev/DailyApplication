@inject DailyApplication.Controllers.EventsController _eventController;
@using System.Security.Claims

<div class="modal-header">
    <h5 class="modal-title">@Item.DeadlineTime.ToString("f")</h5>
    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick=Toggle>
        <span aria-hidden="true">&times;</span>
    </button>
</div>
<div class="modal-body">
    <h5 class="modal-title">@Item.Name</h5>
    <div class="my-1">
        @if (Item.Description != null)
        {
            <p class="card-text">
                @Item.Description
            </p>
        }
        else
        {
            <p class="card-text">
                Нет описания
            </p>
        }
    </div>
    <div class="my-1">
        @if (Item_subs != null)
        {

            @foreach (Sub_event sub_Event in Item_subs)
            {<p class="card-text">
        @sub_Event.Description
                </p>
            }

        }
        else
        {
            <p class="card-text">
                Нет описания
            </p>
        }
    </div>
</div>
<div class="modal-footer">
    <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick=Toggle>Изменить</button>
    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick=Toggle>Удалить</button>
</div>

@code {
    [Parameter]
    public Event Item { get; set; }

    [Parameter]
    public EventCallback Toggle { get; set; }

    public List<Sub_event> Item_subs { get; set; }

    protected override void OnInitialized()
    {
        if (_eventController.GetEventSubEvents(Item.Id) != null)
            Item_subs = _eventController.GetEventSubEvents(Item.Id);
    }

    //[Parameter]
    //public EventCallback<Event> CreateEvent { get; set; }

    //private async void AddEvent()
    //{
    //    AuthenticationState currentAuth = await authenticationStateTask;
    //    ClaimsPrincipal currentUser = currentAuth.User;

    //    if (!string.IsNullOrWhiteSpace(eventName))
    //    {
    //        _eventController.CreateEvent(eventName, eventDescription, currentUser, eventDeadline);

    //        eventName = string.Empty;
    //        eventDescription = string.Empty;
    //        eventDeadline = DateTime.Now;

    //        Event newEvent = new Event() { Name = eventName, Description = eventDescription, DeadlineTime = eventDeadline, IsDone = false };

    //        await CreateEvent.InvokeAsync(newEvent);
    //    }

    //}
}