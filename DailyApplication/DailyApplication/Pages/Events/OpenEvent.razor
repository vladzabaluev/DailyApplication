@inject DailyApplication.Controllers.EventsController _eventController;
@using System.Security.Claims

@if (edit)
{
    <div class="modal-header">
        <h5 class="modal-title">Изменить событие</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="@(() => Toggle.InvokeAsync(DateTime.Now))">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="modal-body">
        <div class="text-danger"></div>
        <div class="form-group">
            <label class="control-label">Название</label>
            <input class="form-control" placeholder="Название" @bind=Item.Name />
            <span class="text-danger"></span>
        </div>
        <div class="form-group">
            <label class="control-label">Описание</label>
            <input type="text" class="form-control" placeholder="Описание" @bind=Item.Description />
            <span class="text-danger"></span>
        </div>
        <div class="form-group">
            <label class="control-label">Время окончания</label>
            <input @bind:format="yyyy-MM-ddTHH:mm" type="datetime-local" class="form-control" placeholder="Время окончания" @bind=Item.DeadlineTime />
            <span class="text-danger"></span>
        </div>
        <p class="font-weight-bold">Команда:</p>
        <div class="form-group">
            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" @onclick="(()=>show = !show)">
                    @eventGroupName
                </button>
                <div class="dropdown-menu @showDropDown" aria-labelledby="dropdownMenuButton">
                    <div class="dropdown-item" @onclick="@(() => {
                                                               Item.Group = null;
                                                               eventGroupName = "Команда";
                                                               show = false;
                                                           })">
                        Нет команды
                    </div>
                    @foreach (var group in groups)
                    {
                        <div class="dropdown-item" @onclick="(() => {
                                                                 Item.Group = group;
                                                                 eventGroupName = group.Name;
                                                                 show = false;
                                                             })">
                            @group.Name
                        </div>
                    }
                </div>
            </div>
        </div>
        <label class="control-label">Подсобытия:</label>
        <div class="form-group">
            @for (int i = 0; i < Item_subs.Count; i++)
            {
                @*<input value="@subEventList[i]" @onchange="((ChangeEventArgs __e) => OneSub(__e.Value.ToString(), i))"  class="alert alert-secondary" role="alert" />*@
                @*<div class="alert alert-secondary" role="alert">@subEventList[i]</div>*@
                <div>
                    <Input SubEvents="@Item_subs" Index="@i" CallBack="@((value) => Item_subs = value)" />
                </div>
            }
            <input class="form-control" placeholder="Новое подсобытие" @bind=GetSubEvent />
            @*<input class="form-control" value="@currentSubEventName" placeholder="Название" @onchange="((ChangeEventArgs __e)=> { currentSubEventName = __e.Value.ToString();
                    subEventList.Add(currentSubEventName);
                    currentSubEventName = string.Empty;
                    __e.Value= string.Empty;
                })" />*@
            <span class="text-danger"></span>
        </div>
    </div>
    <div class="modal-footer">
        <div>
            <input type="submit" value="Изменить" class="btn btn-primary" @onclick="(() => {
                                                                                                changeEvent(Item);
                                                                                                Change();
                                                                                                Toggle.InvokeAsync(DateTime.Now);
                                                                                           })" @onclick:preventDefault />
        </div>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Change">Отмена</button>
    </div>
}
else
{
    <div class="modal-header">
        <h5 class="modal-title">@Item.DeadlineTime.ToString("f")</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick=Toggle>
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="modal-body">
        <h5 class="modal-title">@Item.Name</h5>
        <div class="my-1">
            @if (Item.Description != null)
            {
                <p class="card-text">
                    @Item.Description
                </p>
            }
            else
            {
                <p class="card-text">
                    Нет описания
                </p>
            }
        </div>
        <hr />
        <p class="font-weight-bold">Команда:</p>
        <div class="form-group">
            <div class="alert alert-secondary">
                @eventGroupName
            </div>
        </div>
        <p class="font-weight-bold">Подсобытия:</p>
        <div class="my-1">
            @if (Item_subs != null)
            {

                @for (int index=0; index < Item_subs.Count; index++)
                {
                    <SubEvent SubEvents="@Item_subs" Index="@index" CallBack="@((value) => Item_subs = value)"/>
                }

            }
            else
            {
                <p class="card-text">
                    Нет подсобытий
                </p>
            }
        </div>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick=Change>Изменить</button>
        <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="(() => {Delete.InvokeAsync(Item);
            Toggle.InvokeAsync();
        })">Удалить</button>
    </div>
}

@code {
    [CascadingParameter(Name = "groups")]
    protected List<Group> groups { get; set; }

    [Parameter]
    public Event Item { get; set; }

    [Parameter]
    public EventCallback Toggle { get; set; }

    private string eventGroupName;
    public List<Sub_event> Item_subs { get; set; }

    private bool show = false;
    #nullable enable
    private string? showDropDown => show ? "show" : null;

    private bool edit = false;

    private List<string> tempSubEvents = new List<string>();
    private string currentSubEventName = "";
    private string GetSubEvent
    {
        get => currentSubEventName;
        set
        {
            Item_subs.Add(new Sub_event() { 
                Description = value, 
                isDone = false
            });
            currentSubEventName = "";
        }
    }

    protected override void OnInitialized()
    {
        if (Item.Group != null) eventGroupName = Item.Group.Name;
        else eventGroupName = "Нет команды";
        if (_eventController.GetEventSubEvents(Item.Id) != null)
            Item_subs = _eventController.GetEventSubEvents(Item.Id);

        if (Item_subs != null)
            foreach (Sub_event subEvent in Item_subs)
                tempSubEvents.Add(subEvent.Description);
    }

    private void Change()
    {
        edit = !edit;
    }

    [Parameter]
    public EventCallback<Event> Delete { get; set; }

    private async void changeEvent(Event editedEvent)
    {
        editedEvent.SubEvents = Item_subs;
        await _eventController.Edit(editedEvent.Id, editedEvent);
    }
}